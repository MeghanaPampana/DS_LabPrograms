//tree traversal
#include<stdio.h>
#include<stdlib.h>
typedef struct node{
	int data;
	struct node *left, *right;
}node;
node *root = NULL;
void ins(int val){
	node *temp = (node *)malloc(sizeof(node));
	node *curr, *parent;
	temp -> data = val;
	temp -> left = temp -> right = NULL;
	if(root == NULL)
		root = temp;
	else{
		curr = root;
		parent = NULL;
		while(1){
			parent = curr;
			if(val < parent -> data){
					curr = curr -> left;
					if(curr == NULL){
						parent -> left = temp;
						return;
					}
			}
			else{
				curr = curr -> right;
				if(curr == NULL){
					parent -> right = temp;
					return;
				}
			}
		}
	}
}
void inorder(node *root){
	if(root != NULL){
		inorder(root -> left);
		printf("%d ", root -> data);
		inorder(root -> right);
	}
}	
void preorder(node *root){
	if(root != NULL){
		printf("%d ", root -> data);
		preorder(root -> left);		
		preorder(root -> right);
	}
}	
void postorder(node *root){
	if(root != NULL){
		postorder(root -> left);
		postorder(root -> right);
		printf("%d ", root -> data);		
	}
}	

int main(){
	int i, arr[7] = {4, 2, 6, 1, 3, 5, 7};
	for(i = 0; i < 7; i++){
		ins(arr[i]);	
	}
	printf("Inorder: ");
	inorder(root);
	printf("Preorder: ");
	preorder(root);
	printf("Postorder: ");
	postorder(root);
	return 0;
}
/* OUTPUT
Inorder: 1 2 3 4 5 6 7 
Preorder: 4 2 1 3 6 5 7 
Postorder: 1 3 2 5 7 6 4 
*/
